
TARGET_CROSS ?= /opt/mips32-mti-elf/2019.09-03-2/bin/mips-mti-elf-

ifneq ($(BR2_TARGET_CROSS),)
TARGET_CROSS := $(call qstrip,$(BR2_TARGET_CROSS))
ifeq ($(TARGET_CROSS),)
TARGET_CROSS := /opt/mips32-mti-elf/2019.09-03-2/bin/mips-mti-elf-
endif
endif

TARGET_AR       = $(TARGET_CROSS)ar
TARGET_AS       = $(TARGET_CROSS)as
TARGET_CC       = $(TARGET_CROSS)gcc
TARGET_CPP      = $(TARGET_CROSS)cpp
TARGET_CXX      = $(TARGET_CROSS)g++
TARGET_FC       = $(TARGET_CROSS)gfortran
TARGET_LD       = $(TARGET_CROSS)ld
TARGET_NM       = $(TARGET_CROSS)nm
TARGET_RANLIB   = $(TARGET_CROSS)ranlib
TARGET_READELF  = $(TARGET_CROSS)readelf
TARGET_OBJCOPY  = $(TARGET_CROSS)objcopy
TARGET_OBJDUMP  = $(TARGET_CROSS)objdump
TARGET_STRIP    = $(TARGET_CROSS)strip

ifeq ($(wildcard $(TARGET_CC)),)
$(info Toolchain $(TARGET_CC) not exist, please install toolchain!!!)
$(info Please download toolchain from)
$(info https://gitlab.hichiptech.com:62443/sw/dl/-/blob/main/Codescape.GNU.Tools.Package.2019.09-03-2.for.MIPS32.MTI.Bare.Metal.Ubuntu-18.04.5.x86_64.tar.gz)
$(info and intsall by)
$(info sudo tar -xzf Codescape.GNU.Tools.Package.2019.09-03-2.for.MIPS32.MTI.Bare.Metal.Ubuntu-18.04.5.x86_64.tar.gz -C /opt)
$(error exit!!!)
endif

TARGET_CROSS_DIR       := $(dir $(shell which $(TARGET_CC)))

TARGET_CFLAGS          := $(call qstrip,$(BR2_TARGET_CFLAGS))
TARGET_CXXFLAGS        := $(call qstrip,$(BR2_TARGET_CXXFLAGS))
TARGET_CPPFLAGS        := $(call qstrip,$(BR2_TARGET_CXXFLAGS))
TARGET_CFLAGS          += -I$(STAGING_DIR)/usr/include_fix -I$(STAGING_DIR)/usr/include -I$(BASE_DIR)/include -I$(PREBUILT_DIR)/usr/include -I$(STAGING_DIR)/usr/include/freetype2
TARGET_CXXFLAGS        += -I$(STAGING_DIR)/usr/include_fix -I$(STAGING_DIR)/usr/include -I$(BASE_DIR)/include -I$(PREBUILT_DIR)/usr/include -I$(STAGING_DIR)/usr/include/freetype2
TARGET_CPPFLAGS        += -I$(STAGING_DIR)/usr/include_fix -I$(STAGING_DIR)/usr/include -I$(BASE_DIR)/include -I$(PREBUILT_DIR)/usr/include -I$(STAGING_DIR)/usr/include/freetype2
TARGET_LDFLAGS         := $(call qstrip,$(BR2_TARGET_LDFLAGS))
TARGET_LDFLAGS         += -L$(STAGING_DIR)/usr/lib -L$(PREBUILT_DIR)/usr/lib
TARGET_LDFLAGS         += -L$(dir $(shell $(TARGET_CC) $(TARGET_CFLAGS) -print-file-name=libgcc.a))

TARGET_FCFLAGS         :=
PKG_CONFIG_HOST_BINARY := $(HOST_DIR)/usr/bin/pkg-config
PKG_CONFIG_HOST_BINARY := $(shell mkdir -p $(PKG_CONFIG_HOST_BINARY) && cd $(PKG_CONFIG_HOST_BINARY) >/dev/null && pwd)
SED:=$(shell which sed || type -p sed) -i -e

APPLY_PATCHES = PATH=$(HOST_DIR)/bin:$$PATH build/scripts/apply-patches.sh $(if $(QUIET),-s)

ifndef MAKE
MAKE:=make
endif
ifndef HOSTMAKE
HOSTMAKE=$(MAKE)
endif
HOSTMAKE :=$(shell which $(HOSTMAKE) || type -p $(HOSTMAKE) || echo make)

ifeq ($(BR2_JLEVEL),0)
PARALLEL_JOBS:=$(shell echo \
	$$((1 + `getconf _NPROCESSORS_ONLN 2>/dev/null || echo 1`)))
else
PARALLEL_JOBS:=$(BR2_JLEVEL)
endif

MAKE1:=$(HOSTMAKE) -j1
MAKE:=$(HOSTMAKE) $(if $(PARALLEL_JOBS),-j$(PARALLEL_JOBS))
BR2_MAKE = $(MAKE)
BR2_MAKE1 = $(MAKE1)
INSTALL := $(shell which install || type -p install)

TARGET_PATH="$(TARGET_CROSS_DIR):$(HOST_DIR)/bin:$(HOST_DIR)/usr/bin:$(HOST_DIR)/usr/sbin/:$(PATH)"

HOST_CPPFLAGS  ?=
HOST_CFLAGS    ?=
HOST_CXXFLAGS  ?=
HOST_LDFLAGS   ?=
HOST_LDFLAGS   ?=

DISABLE_NLS:=
DISABLE_LARGEFILE:=
DISABLE_IPV6:=
SHARED_STATIC_LIBS_OPTS=--enable-static --disable-shared
BR2_AC_CV_TRAP_CHECK ?=
BR2_AC_CV_C_BIGENDIAN ?=
GNU_TARGET_NAME := mips-mti-elf
GNU_HOST_NAME:=$(shell uname -m)

# silent mode requested?
QUIET := $(if $(findstring s,$(filter-out --%,$(MAKEFLAGS))),-q)

TARGET_CONFIGURE_OPTS=PATH=$(TARGET_PATH) \
		AR="$(TARGET_AR)" \
		AS="$(TARGET_AS)" \
		LD="$(TARGET_LD)" \
		NM="$(TARGET_NM)" \
		CC="$(TARGET_CC)" \
		GCC="$(TARGET_CC)" \
		CPP="$(TARGET_CPP)" \
		CXX="$(TARGET_CXX)" \
		FC="$(TARGET_FC)" \
		RANLIB="$(TARGET_RANLIB)" \
		READELF="$(TARGET_READELF)" \
		STRIP="$(TARGET_STRIP)" \
		OBJCOPY="$(TARGET_OBJCOPY)" \
		OBJDUMP="$(TARGET_OBJDUMP)" \
		AR_FOR_BUILD="$(HOSTAR)" \
		AS_FOR_BUILD="$(HOSTAS)" \
		CC_FOR_BUILD="$(HOSTCC)" \
		GCC_FOR_BUILD="$(HOSTCC)" \
		CXX_FOR_BUILD="$(HOSTCXX)" \
		FC_FOR_BUILD="$(HOSTFC)" \
		LD_FOR_BUILD="$(HOSTLD)" \
		CPPFLAGS_FOR_BUILD="$(HOST_CPPFLAGS)" \
		CFLAGS_FOR_BUILD="$(HOST_CFLAGS)" \
		CXXFLAGS_FOR_BUILD="$(HOST_CXXFLAGS)" \
		LDFLAGS_FOR_BUILD="$(HOST_LDFLAGS)" \
		FCFLAGS_FOR_BUILD="$(HOST_FCFLAGS)" \
		DEFAULT_ASSEMBLER="$(TARGET_AS)" \
		DEFAULT_LINKER="$(TARGET_LD)" \
		CPPFLAGS="$(TARGET_CPPFLAGS)" \
		CFLAGS="$(TARGET_CFLAGS)" \
		CXXFLAGS="$(TARGET_CXXFLAGS)" \
		LDFLAGS="$(TARGET_LDFLAGS)" \
		FCFLAGS="$(TARGET_FCFLAGS)" \
		PKG_CONFIG="$(PKG_CONFIG_HOST_BINARY)" \
		STAGING_DIR="$(STAGING_DIR)"

TARGET_MAKE_ENV=PATH=$(TARGET_PATH) \
		Q=$(Q)

TARGET_CONFIGURE_ARGS= \
	$(BR2_AC_CV_TRAP_CHECK) \
	ac_cv_func_mmap_fixed_mapped=yes \
	ac_cv_func_memcmp_working=yes \
	ac_cv_have_decl_malloc=yes \
	gl_cv_func_malloc_0_nonnull=yes \
	ac_cv_func_malloc_0_nonnull=yes \
	ac_cv_func_calloc_0_nonnull=yes \
	ac_cv_func_realloc_0_nonnull=yes \
	lt_cv_sys_lib_search_path_spec="" \
	$(BR2_AC_CV_C_BIGENDIAN)

include build/pkg-utils.mk
include build/pkg-download.mk
include build/pkg-generic.mk
include build/pkg-autotools.mk
include build/pkg-cmake.mk
-include build/pkg-release.mk
