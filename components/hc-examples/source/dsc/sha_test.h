/*
 * Copyright (C) 2019 X-Sail Technology Co,. LTD.
 *
 * Authors:  X-Sail
 *
 * This source is confidential and is  X-Sail's proprietary information.
 * This source is subject to  X-Sail License Agreement, and shall not be
 * disclosed to unauthorized individual.
 *
 * THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY
 * OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED
 * TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
 * PARTICULAR PURPOSE.
 */
#ifndef __SHA_HEADER_H__
#define __SHA_HEADER_H__

/* sha input data */
static uint8_t sha_16bytes_input[16] = {
    0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,
    0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f
};
static uint8_t sha_20bytes_input[20] = {
    0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,
    0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,
    0x6e,0x7d,0xa5,0x89
};
static uint8_t sha_80bytes_input[80] = {
    0x56,0x45,0xfb,0x75,0xa2,0xed,0x1d,0x1d,
    0x1d,0x1e,0x2a,0x93,0x42,0xfd,0x62,0x6b,
    0x56,0x35,0x1b,0x85,0xa1,0xed,0x1d,0x1d,
    0xa8,0x1e,0x2a,0x73,0x47,0xfd,0x62,0x6c,
    0x50,0xe5,0x6b,0x65,0x52,0xed,0x1d,0x1d,
    0x52,0x25,0x2b,0x55,0x22,0xed,0x1d,0x1d,
    0xa5,0x1e,0x5a,0x13,0x17,0xfd,0x62,0x6b,
    0x17,0x15,0x4b,0x45,0x52,0xed,0x1d,0x1c,
    0xa3,0x1e,0x8a,0x83,0x77,0xfd,0x62,0x6a,
    0x57,0xe5,0x4b,0xa5,0x92,0xed,0x1d,0x1c
};

/* sha1 output data */
static uint8_t sha1_16bytes_result[20] = {
    0x56,0x17,0x8b,0x86,0xa5,0x7f,0xac,0x22,
    0x89,0x9a,0x99,0x64,0x18,0x5c,0x2c,0xc9,
    0x6e,0x7d,0xa5,0x89
};
static uint8_t sha1_20bytes_result[20] = {
    0x57,0xe5,0xfb,0xa5,0xa2,0xed,0x1d,0x1d,
    0xad,0x1e,0x2a,0x53,0x47,0xfd,0x62,0x6b,
    0xcb,0x68,0xfa,0x30
};
static uint8_t sha1_80bytes_result[20] = {
    0x1d,0x35,0xef,0xd7,0x8c,0x82,0x80,0xf6,
    0xb0,0x35,0x35,0xd5,0x9b,0x16,0x9b,0xe1,
    0x7d,0xb2,0xeb,0x35
};
/* sha224 output  data */
static uint8_t sha224_16bytes_result[28] = {
    0x52,0x9d,0x65,0x6a,0x8b,0xc4,0x13,0xfe,
    0xf5,0x8d,0xa8,0x2e,0x1b,0xf0,0x30,0x8d,
    0xcf,0xe0,0x42,0x9d,0xcd,0x80,0x68,0x7e,
    0x69,0xc9,0x46,0x33
};
static uint8_t sha224_20bytes_result[28] = {
    0xbb,0xd2,0x63,0xa7,0xf4,0xd3,0x16,0x8d,
    0xe6,0xc5,0x24,0x05,0x19,0x5a,0x8b,0x5d,
    0x5b,0xae,0x45,0x55,0xcb,0x5f,0x33,0x67,
    0x38,0x17,0xc8,0x8d
};
static uint8_t sha224_80bytes_result[28] = {
    0xb9,0x05,0xd9,0xc4,0x71,0x5b,0xb7,0x24,
    0x54,0x6d,0xe9,0x61,0xfa,0x34,0xc9,0x3f,
    0x49,0x47,0x31,0x4c,0x63,0x04,0x95,0xb4,
    0x01,0x2e,0x5e,0xa5
};

/* sha256 output  data */
static uint8_t sha256_16bytes_result[32] = {
    0xbe,0x45,0xcb,0x26,0x05,0xbf,0x36,0xbe,
    0xbd,0xe6,0x84,0x84,0x1a,0x28,0xf0,0xfd,
    0x43,0xc6,0x98,0x50,0xa3,0xdc,0xe5,0xfe,
    0xdb,0xa6,0x99,0x28,0xee,0x3a,0x89,0x91
};
static uint8_t sha256_20bytes_result[32] = {
    0xa2,0xd9,0x77,0x92,0x47,0xf0,0x67,0xe3,
    0xdf,0xd8,0x12,0xa4,0xec,0x1f,0xf4,0x28,
    0x61,0x57,0x12,0x70,0xc6,0x57,0x40,0xca,
    0xf6,0xe4,0xf8,0x70,0xdb,0x1f,0x69,0x13
};
static uint8_t sha256_80bytes_result[32] = {
    0x62,0x20,0x73,0xd1,0x6e,0x31,0xd1,0xe8,
    0x9b,0x78,0x53,0x7f,0x65,0x0c,0x3a,0x82,
    0x94,0xd4,0xe4,0x95,0x0a,0xe5,0x61,0x9b,
    0x34,0xfd,0x1d,0xcf,0xf6,0x97,0x7a,0x5b
};

/* sha384 output  data */
static uint8_t sha384_16bytes_result[48] = {
    0xc8,0x1d,0xf9,0x8d,0x9e,0x6d,0xe9,0xb8,
    0x58,0xa1,0xe6,0xeb,0xa0,0xf1,0xa3,0xa3,
    0x99,0xd9,0x8c,0x44,0x1e,0x67,0xe1,0x06,
    0x26,0x01,0x80,0x64,0x85,0xbb,0x89,0x12,
    0x5e,0xfd,0x54,0xcc,0x78,0xdf,0x5f,0xbc,
    0xea,0xbc,0x93,0xcd,0x7c,0x7b,0xa1,0x3b
};
static uint8_t sha384_20bytes_result[48] = {
    0xa5,0x72,0x57,0x85,0x20,0x2d,0x06,0x9c,
    0xbe,0xf8,0x07,0x9a,0x61,0x62,0xe2,0x34,
    0xfc,0x93,0x57,0x25,0xe1,0x05,0xd8,0x03,
    0x0d,0x3a,0x29,0x3f,0xe2,0x0c,0x93,0x27,
    0x14,0xef,0xff,0x88,0x80,0x58,0xbe,0x80,
    0x04,0x0e,0x41,0xfc,0xc0,0x87,0xb3,0xc6
};
static uint8_t sha384_80bytes_result[48] = {
    0x5f,0x22,0x9b,0xea,0xba,0xa4,0x38,0xdd,
    0x82,0xbb,0x64,0xf1,0x5d,0x4e,0x31,0x2a,
    0x19,0xb9,0xc9,0x7c,0xe4,0x02,0x09,0xd7,
    0x2e,0x88,0xaa,0x08,0x92,0x21,0x38,0x86,
    0x2f,0xb0,0x71,0x98,0xe1,0x14,0xe6,0xeb,
    0x55,0xdc,0x83,0x59,0x69,0xa6,0x2f,0x18
};

/* sha512 output  data */
static uint8_t sha512_16bytes_result[64] = {
    0xda,0xa2,0x95,0xbe,0xed,0x4e,0x2e,0xe9,
    0x4c,0x24,0x01,0x5b,0x56,0xaf,0x62,0x6b,
    0x4f,0x21,0xef,0x9f,0x44,0xf2,0xb3,0xd4,
    0x0f,0xc4,0x1c,0x90,0x90,0x0a,0x6b,0xf1,
    0xb4,0x86,0x7c,0x43,0xc5,0x7c,0xda,0x54,
    0xd1,0xb6,0xfd,0x48,0x69,0xb3,0xf2,0x3c,
    0xed,0x5e,0x0b,0xa3,0xc0,0x5d,0x0b,0x16,
    0x80,0xdf,0x4e,0xc7,0xd0,0x76,0x24,0x03
};
static uint8_t sha512_20bytes_result[64] = {
    0x39,0x36,0x34,0xea,0xd9,0xb2,0x7d,0x65,
    0xa6,0x7c,0x00,0xa9,0xa6,0x30,0x65,0x96,
    0xaa,0xec,0xf9,0x46,0x12,0xb7,0xa1,0x33,
    0xa5,0x0a,0xd6,0x9d,0x6a,0xf2,0x5b,0xa7,
    0x0c,0x04,0x0f,0x5e,0xca,0xea,0xf5,0x17,
    0x2e,0x2d,0x31,0x78,0x3f,0x77,0x97,0x3b,
    0x44,0xac,0x1d,0xe3,0x13,0x03,0x36,0x33,
    0x87,0x66,0x5d,0xe0,0xe1,0xc0,0xf5,0xc2
};
static uint8_t sha512_80bytes_result[64] = {
    0x20,0xb3,0x2d,0x2a,0x14,0xf1,0xdd,0xa8,
    0xe0,0x4a,0x26,0x12,0x5b,0x15,0x5f,0x6b,
    0x57,0xd1,0xca,0xf3,0xd6,0xc4,0x42,0xac,
    0x8d,0x0f,0xf0,0x59,0x15,0xbd,0x84,0xc7,
    0x02,0x2f,0x85,0xf7,0x38,0x18,0xa4,0xdb,
    0xf4,0xbb,0xa5,0x57,0x42,0x0a,0xf4,0x41,
    0x3e,0xc5,0xa2,0x3b,0x31,0x9a,0x0b,0xe2,
    0xfa,0x1e,0xcf,0xe6,0x3c,0x76,0xd2,0x46
};

struct _dsc_sha_test_case{
	const char* testcase;
	struct dsc_sha_params params;
	struct dsc_buffer result;	
	uint8_t *buffer;
	int size;
};

#define DSC_SHA_TESTCASE_NUM 15
struct _dsc_sha_test_case dsc_sha_test_case[DSC_SHA_TESTCASE_NUM]={
	//SHA1
	{
		.testcase = "DSC_SHA_TYPE_1_16BYTES",	
		.params.type = DSC_SHA_TYPE_1,
		.buffer = (void*)sha_16bytes_input,
		.size = sizeof(sha_16bytes_input),
		.result.buffer = (void*)sha1_16bytes_result,
		.result.size = sizeof(sha1_16bytes_result),			
	},
	
	{
		.testcase = "DSC_SHA_TYPE_1_20BYTES",
		.params.type = DSC_SHA_TYPE_1,
		.buffer = (void*)sha_20bytes_input,
		.size = sizeof(sha_20bytes_input),
		.result.buffer = (void*)sha1_20bytes_result,
		.result.size = sizeof(sha1_20bytes_result),
	},
	{
		.testcase = "DSC_SHA_TYPE_1_80BYTES",
		.params.type = DSC_SHA_TYPE_1,
		.buffer = (void*)sha_80bytes_input,
		.size = sizeof(sha_80bytes_input),
		.result.buffer = (void*)sha1_80bytes_result,
		.result.size = sizeof(sha1_80bytes_result),
	},
	//SHA224
	{
		.testcase = "DSC_SHA_TYPE_224_16BYTES",
		.params.type = DSC_SHA_TYPE_224,
		.buffer = (void*)sha_16bytes_input,
		.size = sizeof(sha_16bytes_input),
		.result.buffer = (void*)sha224_16bytes_result,
		.result.size = sizeof(sha224_16bytes_result),
	},
	{
		.testcase = "DSC_SHA_TYPE_224_20BYTES",
		.params.type = DSC_SHA_TYPE_224,
		.buffer = (void*)sha_20bytes_input,
		.size = sizeof(sha_20bytes_input),
		.result.buffer = (void*)sha224_20bytes_result,
		.result.size = sizeof(sha224_20bytes_result),
	},
	{
		.testcase = "DSC_SHA_TYPE_224_80BYTES",
		.params.type = DSC_SHA_TYPE_224,
		.buffer = (void*)sha_80bytes_input,
		.size = sizeof(sha_80bytes_input),
		.result.buffer = (void*)sha224_80bytes_result,
		.result.size = sizeof(sha224_80bytes_result),
	},
	//SHA256
	{
		.testcase = "DSC_SHA_TYPE_256_16BYTES",
		.params.type = DSC_SHA_TYPE_256,
		.buffer = (void*)sha_16bytes_input,
		.size = sizeof(sha_16bytes_input),
		.result.buffer = (void*)sha256_16bytes_result,
		.result.size = sizeof(sha256_16bytes_result),
	},
	{
		.testcase = "DSC_SHA_TYPE_256_20BYTES",
		.params.type = DSC_SHA_TYPE_256,
		.buffer = (void*)sha_20bytes_input,
		.size = sizeof(sha_20bytes_input),
		.result.buffer = (void*)sha256_20bytes_result,
		.result.size = sizeof(sha256_20bytes_result),
	},
	{
		.testcase = "DSC_SHA_TYPE_256_80BYTES",
		.params.type = DSC_SHA_TYPE_256,
		.buffer = (void*)sha_80bytes_input,
		.size = sizeof(sha_80bytes_input),
		.result.buffer = (void*)sha256_80bytes_result,
		.result.size = sizeof(sha256_80bytes_result),
	},
	//SHA384
	{
		.testcase = "DSC_SHA_TYPE_384_16BYTES",
		.params.type = DSC_SHA_TYPE_384,
		.buffer = (void*)sha_16bytes_input,
		.size = sizeof(sha_16bytes_input),
		.result.buffer = (void*)sha384_16bytes_result,
		.result.size = sizeof(sha384_16bytes_result),
	},
	{
		.testcase = "DSC_SHA_TYPE_384_20BYTES",
		.params.type = DSC_SHA_TYPE_384,
		.buffer = (void*)sha_20bytes_input,
		.size = sizeof(sha_20bytes_input),
		.result.buffer = (void*)sha384_20bytes_result,
		.result.size = sizeof(sha384_20bytes_result),
	},
	{
		.testcase = "DSC_SHA_TYPE_384_80BYTES",
		.params.type = DSC_SHA_TYPE_384,
		.buffer = (void*)sha_80bytes_input,
		.size = sizeof(sha_80bytes_input),
		.result.buffer = (void*)sha384_80bytes_result,
		.result.size = sizeof(sha384_80bytes_result),
	},
	//SHA512
	{
		.testcase = "DSC_SHA_TYPE_512_16BYTES",
		.params.type = DSC_SHA_TYPE_512,
		.buffer = (void*)sha_16bytes_input,
		.size = sizeof(sha_16bytes_input),
		.result.buffer = (void*)sha512_16bytes_result,
		.result.size = sizeof(sha512_16bytes_result),
	},
	{
		.testcase = "DSC_SHA_TYPE_512_20BYTES",
		.params.type = DSC_SHA_TYPE_512,
		.buffer = (void*)sha_20bytes_input,
		.size = sizeof(sha_20bytes_input),
		.result.buffer = (void*)sha512_20bytes_result,
		.result.size = sizeof(sha512_20bytes_result),
	},
	{
		.testcase = "DSC_SHA_TYPE_512_80BYTES",
		.params.type = DSC_SHA_TYPE_512,
		.buffer = (void*)sha_80bytes_input,
		.size = sizeof(sha_80bytes_input),
		.result.buffer = (void*)sha512_80bytes_result,
		.result.size = sizeof(sha512_80bytes_result),
	},	
	
}; 
#endif /* __WAVE_HEADER_H__ */

